{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":23812,"sourceType":"datasetVersion","datasetId":17810}],"dockerImageVersionId":30839,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport keras_tuner as kt\nfrom sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sn","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-26T04:33:00.078171Z","iopub.execute_input":"2025-01-26T04:33:00.078482Z","iopub.status.idle":"2025-01-26T04:33:17.439251Z","shell.execute_reply.started":"2025-01-26T04:33:00.078459Z","shell.execute_reply":"2025-01-26T04:33:17.438217Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"def data_preprocessing():\n    train_datagen = ImageDataGenerator(\n        rescale=1./255,\n        rotation_range=20,\n        zoom_range=0.3,\n        horizontal_flip=True,\n        width_shift_range=0.2,\n        height_shift_range=0.2\n    )\n\n    validation_datagen = ImageDataGenerator(rescale=1./255)\n    test_datagen = ImageDataGenerator(rescale=1./255)\n\n    train_dir = '/kaggle/input/chest-xray-pneumonia/chest_xray/train'\n    validation_dir = '/kaggle/input/chest-xray-pneumonia/chest_xray/val'\n    test_dir = '/kaggle/input/chest-xray-pneumonia/chest_xray/test'\n\n    train_generator = train_datagen.flow_from_directory(\n        train_dir,\n        target_size=(150, 150),\n        batch_size=64,\n        class_mode='binary'\n    )\n\n    validation_generator = validation_datagen.flow_from_directory(\n        validation_dir,\n        target_size=(150, 150),\n        batch_size=64,\n        class_mode='binary'\n    )\n\n    test_generator = test_datagen.flow_from_directory(\n        test_dir,\n        target_size=(150, 150),\n        batch_size=128,\n        class_mode='binary',\n        shuffle=False\n    )\n\n    return train_generator, validation_generator, test_generator","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T04:33:17.440586Z","iopub.execute_input":"2025-01-26T04:33:17.441321Z","iopub.status.idle":"2025-01-26T04:33:17.448087Z","shell.execute_reply.started":"2025-01-26T04:33:17.441288Z","shell.execute_reply":"2025-01-26T04:33:17.446904Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"def build_model(hp):\n    model = Sequential([\n        Conv2D(\n            filters=hp.Int('conv_1_filters', min_value=32, max_value=128, step=32),\n            kernel_size=hp.Choice('conv_1_kernel', values=[3, 5]),\n            activation='relu',\n            input_shape=(150, 150, 3)\n        ),\n        MaxPooling2D(pool_size=(2, 2)),\n\n        Conv2D(\n            filters=hp.Int('conv_2_filters', min_value=64, max_value=256, step=64),\n            kernel_size=hp.Choice('conv_2_kernel', values=[3, 5]),\n            activation='relu'\n        ),\n        MaxPooling2D(pool_size=(2, 2)),\n\n        Dropout(hp.Float('dropout_1', min_value=0.2, max_value=0.5, step=0.1)),\n        Flatten(),\n\n        Dense(\n            units=hp.Int('dense_units', min_value=64, max_value=256, step=64),\n            activation='relu'\n        ),\n        Dropout(hp.Float('dropout_2', min_value=0.2, max_value=0.5, step=0.1)),\n\n        Dense(1, activation='sigmoid')\n    ])\n\n    model.compile(\n        optimizer=hp.Choice('optimizer', values=['adam', 'rmsprop']),\n        loss='binary_crossentropy',\n        metrics=['accuracy']\n    )\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T04:33:17.450066Z","iopub.execute_input":"2025-01-26T04:33:17.450364Z","iopub.status.idle":"2025-01-26T04:33:17.476880Z","shell.execute_reply.started":"2025-01-26T04:33:17.450338Z","shell.execute_reply":"2025-01-26T04:33:17.475600Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def perform_random_search(train_generator, validation_generator):\n    tuner = kt.RandomSearch(\n        build_model,\n        objective='val_accuracy',\n        max_trials=5,\n        executions_per_trial=1,\n        directory='random_search',\n        project_name='pneumonia_detection'\n    )\n\n    tuner.search(\n        train_generator,\n        epochs=20,\n        validation_data=validation_generator,\n        callbacks=[EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)]\n    )\n\n    best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n    model = tuner.hypermodel.build(best_hps)\n\n    return model, tuner","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T04:33:17.478285Z","iopub.execute_input":"2025-01-26T04:33:17.478575Z","iopub.status.idle":"2025-01-26T04:33:17.500693Z","shell.execute_reply.started":"2025-01-26T04:33:17.478550Z","shell.execute_reply":"2025-01-26T04:33:17.499547Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def train_best_model(model, train_generator, validation_generator):\n    early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n    history = model.fit(\n        train_generator,\n        epochs=50,\n        validation_data=validation_generator,\n        callbacks=[early_stopping]\n    )\n    model.save('pneumonia_detection_model_without_attention_mechanism.h5')\n    return history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T04:33:17.501886Z","iopub.execute_input":"2025-01-26T04:33:17.502205Z","iopub.status.idle":"2025-01-26T04:33:17.519025Z","shell.execute_reply.started":"2025-01-26T04:33:17.502181Z","shell.execute_reply":"2025-01-26T04:33:17.517999Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train_generator, test_generator, validation_generator = data_preprocessing()\nmodel, tuner = perform_random_search(train_generator, test_generator)\nhistory = train_best_model(model, train_generator, test_generator)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T04:33:17.520065Z","iopub.execute_input":"2025-01-26T04:33:17.520448Z"}},"outputs":[{"name":"stdout","text":"Trial 5 Complete [03h 12m 45s]\nval_accuracy: 0.9375\n\nBest val_accuracy So Far: 0.9375\nTotal elapsed time: 10h 58m 35s\nEpoch 1/50\n\u001b[1m82/82\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m849s\u001b[0m 10s/step - accuracy: 0.6609 - loss: 5.2870 - val_accuracy: 0.5000 - val_loss: 1.4863\nEpoch 2/50\n\u001b[1m23/82\u001b[0m \u001b[32m━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━\u001b[0m \u001b[1m10:08\u001b[0m 10s/step - accuracy: 0.7391 - loss: 0.5668","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"import shutil\n\ndef download_kaggle_folder(folder_path, output_zip_name):\n    # Kompres folder menjadi file ZIP\n    shutil.make_archive(output_zip_name, 'zip', folder_path)\n    print(f\"Folder '{folder_path}' telah dikompresi menjadi '{output_zip_name}.zip'.\")\n\n# Contoh penggunaan\n# Misalnya, folder yang ingin diunduh ada di '/kaggle/working/my_folder'\ndownload_kaggle_folder('/kaggle/working/random_search', 'random_search')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T16:03:48.355599Z","iopub.execute_input":"2025-01-26T16:03:48.356113Z","iopub.status.idle":"2025-01-26T16:05:58.069561Z","shell.execute_reply.started":"2025-01-26T16:03:48.356076Z","shell.execute_reply":"2025-01-26T16:05:58.068130Z"}},"outputs":[{"name":"stdout","text":"Folder '/kaggle/working/random_search' telah dikompresi menjadi 'random_search.zip'.\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"y_pred = (model.predict(test_generator) > 0.5).astype(\"int32\")\ny_true = test_generator.classes","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}